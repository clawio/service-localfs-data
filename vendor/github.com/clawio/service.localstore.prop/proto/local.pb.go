// Code generated by protoc-gen-go.
// source: local.proto
// DO NOT EDIT!

/*
Package localstore is a generated protocol buffer package.

It is generated from these files:
	local.proto

It has these top-level messages:
	Void
	PutReq
*/
package localstore

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Void struct {
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}

type PutReq struct {
	AccessToken string `protobuf:"bytes,1,opt,name=access_token" json:"access_token,omitempty"`
	Path        string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Checksum    string `protobuf:"bytes,3,opt,name=checksum" json:"checksum,omitempty"`
}

func (m *PutReq) Reset()         { *m = PutReq{} }
func (m *PutReq) String() string { return proto.CompactTextString(m) }
func (*PutReq) ProtoMessage()    {}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Prop service

type PropClient interface {
	Put(ctx context.Context, in *PutReq, opts ...grpc.CallOption) (*Void, error)
}

type propClient struct {
	cc *grpc.ClientConn
}

func NewPropClient(cc *grpc.ClientConn) PropClient {
	return &propClient{cc}
}

func (c *propClient) Put(ctx context.Context, in *PutReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := grpc.Invoke(ctx, "/localstore.Prop/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Prop service

type PropServer interface {
	Put(context.Context, *PutReq) (*Void, error)
}

func RegisterPropServer(s *grpc.Server, srv PropServer) {
	s.RegisterService(&_Prop_serviceDesc, srv)
}

func _Prop_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PropServer).Put(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Prop_serviceDesc = grpc.ServiceDesc{
	ServiceName: "localstore.Prop",
	HandlerType: (*PropServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _Prop_Put_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
